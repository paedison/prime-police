# Generated by Django 5.0.6 on 2024-06-30 07:35

import a_official.models.base_settings
import ckeditor.fields
import ckeditor_uploader.fields
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(choices=a_official.models.base_settings.year_choices, default=2024)),
                ('exam', models.CharField(choices=a_official.models.base_settings.exam_choices, default='경위', max_length=10)),
                ('subject', models.CharField(choices=a_official.models.base_settings.subject_choices, default='형사', max_length=10)),
                ('number', models.IntegerField(choices=a_official.models.base_settings.number_choices, default=1)),
                ('answer', models.IntegerField()),
                ('question', models.TextField()),
                ('data', ckeditor_uploader.fields.RichTextUploadingField()),
            ],
            options={
                'verbose_name': '기출문제',
                'verbose_name_plural': '기출문제',
                'ordering': ['-year', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '기출문제 태그',
                'verbose_name_plural': '기출문제 태그',
                'db_table': 'a_official_problem_tag',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.JSONField(blank=True, null=True)),
                ('exam', models.CharField(choices=a_official.models.base_settings.exam_choices, default='경위', max_length=2)),
                ('unit', models.CharField(choices=a_official.models.base_settings.unit_choices, default='경위', max_length=10)),
                ('name', models.CharField(choices=a_official.models.base_settings.department_choices, default='일반', max_length=10)),
                ('order', models.IntegerField()),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('exam', 'unit', 'name')},
            },
            bases=(models.Model, a_official.models.base_settings.ChoiceMethod),
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.JSONField(blank=True, null=True)),
                ('year', models.IntegerField(choices=a_official.models.base_settings.year_choices, default=2024)),
                ('exam', models.CharField(choices=a_official.models.base_settings.exam_choices, default='경위', max_length=2)),
                ('round', models.IntegerField(default=0)),
                ('answer_official', models.JSONField(default=dict)),
                ('page_opened_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('exam_started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('exam_finished_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('answer_predict_opened_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('answer_official_opened_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'unique_together': {('year', 'exam', 'round')},
            },
            bases=(models.Model, a_official.models.base_settings.ChoiceMethod),
        ),
        migrations.CreateModel(
            name='PredictAnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('year', models.IntegerField(choices=a_official.models.base_settings.year_choices, default=2024)),
                ('exam', models.CharField(choices=a_official.models.base_settings.exam_choices, max_length=2)),
                ('round', models.IntegerField(default=0)),
                ('subject', models.CharField(choices=a_official.models.base_settings.subject_choices, max_length=2)),
                ('number', models.IntegerField()),
                ('answer', models.IntegerField(blank=True, null=True)),
                ('count_1', models.IntegerField(default=0)),
                ('count_2', models.IntegerField(default=0)),
                ('count_3', models.IntegerField(default=0)),
                ('count_4', models.IntegerField(default=0)),
                ('count_5', models.IntegerField(default=0)),
                ('count_0', models.IntegerField(default=0)),
                ('count_None', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': '성적예측 답안 개수',
                'verbose_name_plural': '성적예측 답안 개수',
                'db_table': 'a_official_predict_answer_count',
                'unique_together': {('year', 'exam', 'round', 'subject', 'number')},
            },
            bases=(models.Model, a_official.models.base_settings.ChoiceMethod),
        ),
        migrations.CreateModel(
            name='PredictStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.JSONField(blank=True, null=True)),
                ('year', models.IntegerField(choices=a_official.models.base_settings.year_choices, default=2024)),
                ('exam', models.CharField(choices=a_official.models.base_settings.exam_choices, default='경위', max_length=2)),
                ('round', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=20)),
                ('serial', models.CharField(max_length=10)),
                ('unit', models.CharField(choices=a_official.models.base_settings.unit_choices, default='경위', max_length=10)),
                ('department', models.CharField(choices=a_official.models.base_settings.department_choices, default='일반', max_length=10)),
                ('password', models.IntegerField()),
                ('prime_id', models.CharField(blank=True, max_length=15, null=True)),
                ('answer', models.JSONField(default=dict)),
                ('answer_count', models.JSONField(default=dict)),
                ('answer_confirmed', models.JSONField(default=dict)),
                ('answer_all_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.JSONField(default=dict)),
                ('rank_total', models.JSONField(default=dict)),
                ('rank_department', models.JSONField(default=dict)),
                ('participants_total', models.JSONField(default=dict)),
                ('participants_department', models.JSONField(default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_predict_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '성적예측 수험정보',
                'verbose_name_plural': '성적예측 수험정보',
                'db_table': 'a_official_predict_student',
                'unique_together': {('year', 'exam', 'round', 'user')},
            },
            bases=(models.Model, a_official.models.base_settings.ChoiceMethod),
        ),
        migrations.CreateModel(
            name='ProblemCollect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('order', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_collect_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 컬렉션',
                'verbose_name_plural': '기출문제 컬렉션',
                'db_table': 'a_official_problem_collect',
                'unique_together': {('user', 'title')},
            },
        ),
        migrations.CreateModel(
            name='ProblemCollectedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_items', to='a_official.problemcollect')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_collected_items', to='a_official.problem')),
            ],
            options={
                'verbose_name': '컬렉션에 추가된 기출문제',
                'verbose_name_plural': '컬렉션에 추가된 기출문제',
                'db_table': 'a_official_problem_collected_item',
                'unique_together': {('collect', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='collections',
            field=models.ManyToManyField(related_name='collected_problems', through='a_official.ProblemCollectedItem', to='a_official.problemcollect'),
        ),
        migrations.CreateModel(
            name='ProblemComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=100)),
                ('comment', ckeditor.fields.RichTextField()),
                ('hit', models.IntegerField(default=1, verbose_name='조회수')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply_comments', to='a_official.problemcomment')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_comment_set', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_comment_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 코멘트',
                'verbose_name_plural': '기출문제 코멘트',
                'db_table': 'a_official_problem_comment',
                'unique_together': {('problem', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='comment_users',
            field=models.ManyToManyField(related_name='official_commented_problems', through='a_official.ProblemComment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_liked', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_like_set', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_like_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 즐겨찾기',
                'verbose_name_plural': '기출문제 즐겨찾기',
                'db_table': 'a_official_problem_like',
                'unique_together': {('problem', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='like_users',
            field=models.ManyToManyField(related_name='official_liked_problems', through='a_official.ProblemLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemMemo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memo', ckeditor.fields.RichTextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_memo_set', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_memo_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 메모',
                'verbose_name_plural': '기출문제 메모',
                'db_table': 'a_official_problem_memo',
                'unique_together': {('problem', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='memo_users',
            field=models.ManyToManyField(related_name='official_memoed_problems', through='a_official.ProblemMemo', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemOpen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_open_set', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_open_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 확인 기록',
                'verbose_name_plural': '기출문제 확인 기록',
                'db_table': 'a_official_problem_open',
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='open_users',
            field=models.ManyToManyField(related_name='official_opened_problems', through='a_official.ProblemOpen', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '⭐️'), (2, '⭐️⭐️'), (3, '⭐️⭐️⭐️'), (4, '⭐️⭐️⭐️⭐️'), (5, '⭐️⭐️⭐️⭐️⭐️')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_rate_set', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_rate_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 난이도',
                'verbose_name_plural': '기출문제 난이도',
                'db_table': 'a_official_problem_rate',
                'unique_together': {('problem', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='rate_users',
            field=models.ManyToManyField(related_name='official_rated_problems', through='a_official.ProblemRate', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemSolve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField(choices=[(1, '①'), (2, '②'), (3, '③'), (4, '④'), (5, '⑤')])),
                ('is_correct', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_solve_set', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_solve_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 정답확인',
                'verbose_name_plural': '기출문제 정답확인',
                'db_table': 'a_official_problem_solve',
                'unique_together': {('problem', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='solve_users',
            field=models.ManyToManyField(related_name='official_solved_problems', through='a_official.ProblemSolve', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('remarks', models.JSONField(blank=True, null=True)),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_tagged_items', to='a_official.problem')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='a_official.problemtag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_tagged_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '태그된 기출문제',
                'verbose_name_plural': '태그된 기출문제',
                'db_table': 'a_official_problem_tagged_item',
                'unique_together': {('tag', 'content_object', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='a_official.ProblemTaggedItem', to='a_official.ProblemTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.JSONField(blank=True, null=True)),
                ('exam', models.CharField(choices=a_official.models.base_settings.exam_choices, default='경위', max_length=2)),
                ('name', models.CharField(choices=a_official.models.base_settings.unit_choices, default='경위', max_length=10)),
                ('order', models.IntegerField()),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('exam', 'name')},
            },
            bases=(models.Model, a_official.models.base_settings.ChoiceMethod),
        ),
        migrations.CreateModel(
            name='PredictAnswerRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.JSONField(blank=True, null=True)),
                ('subject', models.CharField(choices=a_official.models.base_settings.subject_choices, max_length=2)),
                ('number', models.IntegerField(choices=a_official.models.base_settings.number_choices, default=1)),
                ('answer', models.IntegerField(default=0)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_records', to='a_official.predictstudent')),
            ],
            options={
                'verbose_name': '성적예측 답안 제출',
                'verbose_name_plural': '성적예측 답안 제출',
                'db_table': 'a_official_predict_answer_record',
                'unique_together': {('student', 'subject', 'number')},
            },
            bases=(models.Model, a_official.models.base_settings.ChoiceMethod),
        ),
        migrations.AlterUniqueTogether(
            name='problem',
            unique_together={('year', 'exam', 'subject', 'number')},
        ),
    ]
