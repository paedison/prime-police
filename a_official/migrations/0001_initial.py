# Generated by Django 5.0.6 on 2024-08-12 09:53

import a_official.models
import ckeditor.fields
import ckeditor_uploader.fields
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(choices=a_official.models.year_choice, default=2025, verbose_name='연도')),
                ('exam', models.CharField(choices=a_official.models.exam_choice, default='경위', max_length=2, verbose_name='시험')),
                ('subject', models.CharField(choices=a_official.models.subject_choice, default='형사', max_length=2, verbose_name='과목')),
                ('number', models.IntegerField(choices=a_official.models.number_choice, default=1, verbose_name='문제 번호')),
                ('answer', models.IntegerField(choices=a_official.models.answer_choice, default=1, verbose_name='정답')),
                ('question', models.TextField(verbose_name='발문')),
                ('data', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='문제 내용')),
            ],
            options={
                'verbose_name': '기출문제',
                'verbose_name_plural': '기출문제',
                'ordering': ['-year', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '기출문제 태그',
                'verbose_name_plural': '기출문제 태그',
                'db_table': 'a_official_problem_tag',
            },
        ),
        migrations.CreateModel(
            name='ProblemCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('order', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 컬렉션',
                'verbose_name_plural': '기출문제 컬렉션',
                'db_table': 'a_official_problem_collection',
                'ordering': ['user', 'order'],
                'unique_together': {('user', 'title')},
            },
        ),
        migrations.CreateModel(
            name='ProblemCollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_items', to='a_official.problemcollection')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_problems', to='a_official.problem')),
            ],
            options={
                'verbose_name': '기출문제 컬렉션 문제',
                'verbose_name_plural': '기출문제 컬렉션 문제',
                'db_table': 'a_official_problem_collection_item',
                'ordering': ['collection__user', 'collection', 'order'],
                'unique_together': {('collection', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='collections',
            field=models.ManyToManyField(related_name='collected_problems', through='a_official.ProblemCollectionItem', to='a_official.problemcollection'),
        ),
        migrations.CreateModel(
            name='ProblemComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(default='', max_length=100)),
                ('content', ckeditor.fields.RichTextField(default='')),
                ('hit', models.IntegerField(default=1, verbose_name='조회수')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply_comments', to='a_official.problemcomment')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 코멘트',
                'verbose_name_plural': '기출문제 코멘트',
                'db_table': 'a_official_problem_comment',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='comment_users',
            field=models.ManyToManyField(related_name='official_commented_problems', through='a_official.ProblemComment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_liked', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='a_official.problemcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_problem_comment_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'a_official_problem_comment_like',
            },
        ),
        migrations.AddField(
            model_name='problemcomment',
            name='like_users',
            field=models.ManyToManyField(related_name='official_liked_comments', through='a_official.ProblemCommentLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_liked', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 즐겨찾기',
                'verbose_name_plural': '기출문제 즐겨찾기',
                'db_table': 'a_official_problem_like',
                'ordering': ['-id'],
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='like_users',
            field=models.ManyToManyField(related_name='official_liked_problems', through='a_official.ProblemLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemMemo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_memos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 메모',
                'verbose_name_plural': '기출문제 메모',
                'db_table': 'a_official_problem_memo',
                'ordering': ['-id'],
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='memo_users',
            field=models.ManyToManyField(related_name='official_memoed_problems', through='a_official.ProblemMemo', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemOpen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opens', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_opens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 확인 기록',
                'verbose_name_plural': '기출문제 확인 기록',
                'db_table': 'a_official_problem_open',
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='open_users',
            field=models.ManyToManyField(related_name='official_opened_problems', through='a_official.ProblemOpen', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=a_official.models.rating_choice, default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_rates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 난이도',
                'verbose_name_plural': '기출문제 난이도',
                'db_table': 'a_official_problem_rate',
                'ordering': ['-id'],
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='rate_users',
            field=models.ManyToManyField(related_name='official_rated_problems', through='a_official.ProblemRate', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemSolve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField(choices=a_official.models.answer_choice, default=1)),
                ('is_correct', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solves', to='a_official.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_solves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 정답확인',
                'verbose_name_plural': '기출문제 정답확인',
                'db_table': 'a_official_problem_solve',
                'ordering': ['-id'],
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='solve_users',
            field=models.ManyToManyField(related_name='official_solved_problems', through='a_official.ProblemSolve', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_problems', to='a_official.problem')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='a_official.problemtag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_tagged_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '기출문제 태그 문제',
                'verbose_name_plural': '기출문제 태그 문제',
                'db_table': 'a_official_problem_tagged_item',
                'unique_together': {('tag', 'content_object', 'user')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='a_official.ProblemTaggedItem', to='a_official.ProblemTag', verbose_name='Tags'),
        ),
        migrations.AlterUniqueTogether(
            name='problem',
            unique_together={('year', 'exam', 'subject', 'number')},
        ),
    ]
