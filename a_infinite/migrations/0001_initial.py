# Generated by Django 5.1 on 2025-04-17 06:22

import a_common.prime_test.model_settings
import a_infinite.models.abstract_models
import ckeditor.fields
import ckeditor_uploader.fields
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '[문제은행] 07_태그',
                'verbose_name_plural': '[문제은행] 07_태그',
                'db_table': 'a_infinite_problem_tag',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.IntegerField(choices=a_common.prime_test.model_settings.semester_choice, default=a_common.prime_test.model_settings.semester_default, verbose_name='기수')),
                ('round', models.IntegerField(choices=a_common.prime_test.model_settings.round_choice, default=1, verbose_name='회차')),
                ('page_opened_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='페이지 오픈 일시')),
                ('exam_started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='시험 시작 일시')),
                ('exam_finished_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='시험 종료 일시')),
            ],
            options={
                'verbose_name': '[문제은행] 00_시험',
                'verbose_name_plural': '[문제은행] 00_시험',
                'constraints': [models.UniqueConstraint(fields=('semester', 'round'), name='unique_infinite_exam')],
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(choices=a_common.prime_test.model_settings.infinite_subject_choice, default='형사', max_length=2, verbose_name='과목')),
                ('number', models.IntegerField(choices=a_common.prime_test.model_settings.number_choice, default=1, verbose_name='문제 번호')),
                ('answer', models.IntegerField(choices=a_common.prime_test.model_settings.answer_choice, default=1, verbose_name='정답')),
                ('question', models.TextField(default='', verbose_name='발문')),
                ('data', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='문제 내용')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='a_infinite.exam')),
            ],
            options={
                'verbose_name': '[문제은행] 01_문제',
                'verbose_name_plural': '[문제은행] 01_문제',
                'ordering': ['-exam', 'id'],
            },
        ),
        migrations.CreateModel(
            name='AnswerCountTopRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.IntegerField(default=1, verbose_name='예상정답')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answer_count_top_rank', to='a_infinite.problem')),
            ],
            options={
                'verbose_name': '[성적결과] 06_답안 개수(상위권)',
                'verbose_name_plural': '[성적결과] 06_답안 개수(상위권)',
                'db_table': 'a_infinite_answer_count_top_rank',
            },
        ),
        migrations.CreateModel(
            name='AnswerCountMidRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.IntegerField(default=1, verbose_name='예상정답')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answer_count_mid_rank', to='a_infinite.problem')),
            ],
            options={
                'verbose_name': '[성적결과] 07_답안 개수(중위권)',
                'verbose_name_plural': '[성적결과] 07_답안 개수(중위권)',
                'db_table': 'a_infinite_answer_count_mid_rank',
            },
        ),
        migrations.CreateModel(
            name='AnswerCountLowRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.IntegerField(default=1, verbose_name='예상정답')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answer_count_low_rank', to='a_infinite.problem')),
            ],
            options={
                'verbose_name': '[성적결과] 08_답안 개수(하위권)',
                'verbose_name_plural': '[성적결과] 08_답안 개수(하위권)',
                'db_table': 'a_infinite_answer_count_low_rank',
            },
        ),
        migrations.CreateModel(
            name='AnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.IntegerField(default=1, verbose_name='예상정답')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answer_count', to='a_infinite.problem', verbose_name='문제')),
            ],
            options={
                'verbose_name': '[성적결과] 03_답안 개수',
                'verbose_name_plural': '[성적결과] 03_답안 개수',
                'db_table': 'a_infinite_answer_count',
            },
        ),
        migrations.CreateModel(
            name='ProblemCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('order', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 09_컬렉션',
                'verbose_name_plural': '[문제은행] 09_컬렉션',
                'db_table': 'a_infinite_problem_collection',
                'ordering': ['user', 'order'],
                'abstract': False,
                'unique_together': {('user', 'title')},
            },
        ),
        migrations.CreateModel(
            name='ProblemCollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_items', to='a_infinite.problemcollection')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_problems', to='a_infinite.problem')),
            ],
            options={
                'verbose_name': '[문제은행] 10_컬렉션 문제',
                'verbose_name_plural': '[문제은행] 10_컬렉션 문제',
                'db_table': 'a_infinite_problem_collection_item',
                'ordering': ['collection__user', 'collection', 'order'],
                'abstract': False,
                'unique_together': {('collection', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='collections',
            field=models.ManyToManyField(related_name='collected_problems', through='a_infinite.ProblemCollectionItem', to='a_infinite.problemcollection'),
        ),
        migrations.CreateModel(
            name='ProblemLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_liked', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='a_infinite.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 03_즐겨찾기',
                'verbose_name_plural': '[문제은행] 03_즐겨찾기',
                'db_table': 'a_infinite_problem_like',
                'ordering': ['-id'],
                'abstract': False,
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='like_users',
            field=models.ManyToManyField(related_name='infinite_liked_problems', through='a_infinite.ProblemLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemMemo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to='a_infinite.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_memos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 06_메모',
                'verbose_name_plural': '[문제은행] 06_메모',
                'db_table': 'a_infinite_problem_memo',
                'ordering': ['-id'],
                'abstract': False,
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='memo_users',
            field=models.ManyToManyField(related_name='infinite_memoed_problems', through='a_infinite.ProblemMemo', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemOpen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opens', to='a_infinite.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_opens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 02_확인기록',
                'verbose_name_plural': '[문제은행] 02_확인기록',
                'db_table': 'a_infinite_problem_open',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='open_users',
            field=models.ManyToManyField(related_name='infinite_opened_problems', through='a_infinite.ProblemOpen', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=a_common.prime_test.model_settings.rating_choice, default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='a_infinite.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_rates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 04_난이도',
                'verbose_name_plural': '[문제은행] 04_난이도',
                'db_table': 'a_infinite_problem_rate',
                'ordering': ['-id'],
                'abstract': False,
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='rate_users',
            field=models.ManyToManyField(related_name='infinite_rated_problems', through='a_infinite.ProblemRate', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemSolve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField(choices=a_common.prime_test.model_settings.answer_choice, default=1)),
                ('is_correct', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solves', to='a_infinite.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_solves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 05_정답확인',
                'verbose_name_plural': '[문제은행] 05_정답확인',
                'db_table': 'a_infinite_problem_solve',
                'ordering': ['-id'],
                'abstract': False,
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='solve_users',
            field=models.ManyToManyField(related_name='infinite_solved_problems', through='a_infinite.ProblemSolve', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_problems', to='a_infinite.problem')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='a_infinite.problemtag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_tagged_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[문제은행] 08_태그 문제',
                'verbose_name_plural': '[문제은행] 08_태그 문제',
                'db_table': 'a_infinite_problem_tagged_item',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='a_infinite.ProblemTaggedItem', to='a_infinite.ProblemTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.JSONField(default=a_infinite.models.abstract_models.get_default_statistics, verbose_name='형사법')),
                ('subject_1', models.JSONField(default=a_infinite.models.abstract_models.get_default_statistics, verbose_name='헌법')),
                ('subject_2', models.JSONField(default=a_infinite.models.abstract_models.get_default_statistics, verbose_name='경찰학')),
                ('subject_3', models.JSONField(default=a_infinite.models.abstract_models.get_default_statistics, verbose_name='범죄학')),
                ('subject_4', models.JSONField(default=a_infinite.models.abstract_models.get_default_statistics, verbose_name='민법총칙')),
                ('sum', models.JSONField(default=a_infinite.models.abstract_models.get_default_statistics, verbose_name='총점')),
                ('exam', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='a_infinite.exam', verbose_name='시험')),
            ],
            options={
                'verbose_name': '[성적결과] 00_시험통계',
                'verbose_name_plural': '[성적결과] 00_시험통계',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='a_infinite.exam', verbose_name='시험')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infinite_students', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '[성적결과] 01_수험정보',
                'verbose_name_plural': '[성적결과] 01_수험정보',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.FloatField(blank=True, null=True, verbose_name='형사법')),
                ('subject_1', models.FloatField(blank=True, null=True, verbose_name='한법')),
                ('subject_2', models.FloatField(blank=True, null=True, verbose_name='경찰학')),
                ('subject_3', models.FloatField(blank=True, null=True, verbose_name='범죄학')),
                ('subject_4', models.FloatField(blank=True, null=True, verbose_name='민법총칙')),
                ('sum', models.FloatField(blank=True, null=True, verbose_name='총점')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to='a_infinite.student', verbose_name='학생')),
            ],
            options={
                'verbose_name': '[성적결과] 04_점수',
                'verbose_name_plural': '[성적결과] 04_점수',
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='형사법')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='헌법')),
                ('subject_2', models.IntegerField(blank=True, null=True, verbose_name='경찰학')),
                ('subject_3', models.IntegerField(blank=True, null=True, verbose_name='범죄학')),
                ('subject_4', models.IntegerField(blank=True, null=True, verbose_name='민법총칙')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank', to='a_infinite.student', verbose_name='학생')),
            ],
            options={
                'verbose_name': '[성적결과] 05_등수',
                'verbose_name_plural': '[성적결과] 05_등수',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('answer', models.IntegerField(choices=a_common.prime_test.model_settings.answer_choice, default=1, verbose_name='답안')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='a_infinite.problem', verbose_name='문제')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='a_infinite.student', verbose_name='학생')),
            ],
            options={
                'verbose_name': '[성적결과] 02_답안',
                'verbose_name_plural': '[성적결과] 02_답안',
            },
        ),
        migrations.AddConstraint(
            model_name='problemtaggeditem',
            constraint=models.UniqueConstraint(fields=('user', 'content_object', 'tag'), name='unique_infinite_problem_tagged_item'),
        ),
        migrations.AlterUniqueTogether(
            name='problemtaggeditem',
            unique_together={('tag', 'content_object', 'user')},
        ),
        migrations.AddConstraint(
            model_name='problem',
            constraint=models.UniqueConstraint(fields=('exam', 'subject', 'number'), name='unique_infinite_problem'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.UniqueConstraint(fields=('exam', 'user'), name='unique_infinite_student'),
        ),
        migrations.AddConstraint(
            model_name='answer',
            constraint=models.UniqueConstraint(fields=('student', 'problem'), name='unique_infinite_answer'),
        ),
    ]
